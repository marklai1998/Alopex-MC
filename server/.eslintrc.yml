extends:
  - eslint-config-standard
  - eslint-config-standard-jsx
  - plugin:jest/recommended
  - plugin:ramda/recommended
parser: babel-eslint
plugins:
  - eslint-plugin-fp
  - eslint-plugin-jest
  - eslint-plugin-ramda
  - eslint-plugin-import
  - eslint-plugin-node
  - eslint-plugin-promise
  - eslint-plugin-standard
env:
  jest: true
  node: true
root: true
rules:
  max-depth:
    - "error"
    -
      max: 2
  max-lines:
    - "error"
    -
      max: 400
      skipBlankLines: true
      skipComments: true
  # should use `String(var)` instead of `'' + var` for type convert
  no-implicit-coercion: error
  # do not allow override local/global variables
  no-shadow:
    - error
    - builtinGlobals: true
  no-shadow-restricted-names: error
  no-unused-vars:
    - error
    - args: after-used
  prefer-arrow-callback: error
  # do not use `let` unless need to reassign
  prefer-const: error

  # avoid accidentally using default type=submit which will reload the page
  react/button-has-type: error
  # must provide key for react component in array
  react/jsx-key: error
  # must not use index as key
  react/no-array-index-key: error
  # this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state
  # see https://medium.com/@wisecobbler/using-a-function-in-setstate-instead-of-an-object-1f5cfd6e55d1
  react/no-access-state-in-setstate: error
  # must not use dangerouslySetInnerHTML
  react/no-danger: error
  # no deprecated react features
  react/no-deprecated: error
  react/no-is-mounted: error
  react/no-find-dom-node: error
  react/no-render-return-value: error
  react/no-string-refs: error
  # never mutate state directly
  react/no-direct-mutation-state: error
  # avoid typo on default static class properties and lifecycle methods
  react/no-typos: error
  # do not allow using `this` in functional component
  react/no-this-in-sfc: error
  # avoid typo
  react/no-unescaped-entities: error
  # avoid typo on property name
  react/no-unknown-property: error
  # should clean up unused props and states
  react/no-unused-prop-types: error
  react/no-unused-state: error
  # enforce prop types definitions
  react/prop-types: error
  # enforce importing react when using jsx
  react/react-in-jsx-scope: error
  # make sure render function return sth
  react/require-render-return: error
  # sort lifecycle method for readability
  react/sort-comp: error
  # avoid wrong html
  react/void-dom-elements-no-children: error
  # prefer functional component if no lifecycle, state and event handlers
  react/prefer-stateless-function:
    - error
    - ignorePureComponents: false
